export default class SplashSpawner {
    constructor(scene) {
        this.scene = scene;

        // —Å–æ–∑–¥–∞—ë–º –≥—Ä—É–ø–ø—É –ø–æ–¥ –∫–ª—è–∫—Å—ã
        this.group = scene.add.group({
            classType: Phaser.GameObjects.Image,
            maxSize: 1530,       // –æ–≥—Ä–∞–Ω–∏—á–∏–º –ø—É–ª
            runChildUpdate: false
        });
    }

    spawn(x, y, enemyWidth = 1, isSpecial) {

        let splash;
        if (isSpecial) {
            splash = this.group.get(x, y, `splashRed`);
            splash.isSpecialRed = true;
        } else {
            splash = this.group.get(x, y, `splash${Phaser.Math.Between(1, 6)}`);
            splash.isSpecialRed = false;
        }

        if (!splash) return;

        splash.setActive(true);
        splash.setVisible(true);
        splash.setDepth(-2);

        // –º–∞—Å—à—Ç–∞–± –æ—Ç —Ä–∞–∑–º–µ—Ä–∞ –≤—Ä–∞–≥–∞, —Å –Ω–µ–±–æ–ª—å—à–∏–º —Ä–∞–∑–±—Ä–æ—Å–æ–º
        if (isSpecial) {
            const finalScale = 0.001 * enemyWidth * Phaser.Math.FloatBetween(0.8, 1.2);
            splash.setScale(finalScale * 0, 5);

            this.scene.tweens.add({
                targets: splash,
                scale: finalScale,
                ease: 'Bounce.easeOut',
                duration: 200
            });
        } else {
            const finalScale = 0.001 * enemyWidth * Phaser.Math.FloatBetween(0.8, 1.2);
            splash.setScale(finalScale * 0.5);

            this.scene.tweens.add({
                targets: splash,
                scale: finalScale,
                ease: 'Bounce.easeOut',
                duration: 200
            });
        }

        splash.setAlpha(1);
        splash.setAngle(Phaser.Math.Between(0, 360));

        // üé® –æ—Ç—Ç–µ–Ω–∫–∏ –æ–∫–æ–ª–æ —á—ë—Ä–Ω–æ–≥–æ (—Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–µ, —Ñ–∏–æ–ª–µ—Ç–æ–≤–æ-—Å–µ—Ä—ã–µ –∏ —Ç.–ø.)
        const colors = [
            0x1a1a1a, // —Ç—ë–º–Ω–æ-—Å–µ—Ä—ã–π –ø–æ—á—Ç–∏ —á—ë—Ä–Ω—ã–π
            0x222222,
            0x2a1f2a, // —Å —Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–º –æ—Ç–ª–∏–≤–æ–º
            0x1f2a2a, // —Å –∑–µ–ª–µ–Ω—Ü–æ–π
            0x2a2620  // —Å –∫–æ—Ä–∏—á–Ω–µ–≤—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º
        ];
        if (!splash.isSpecialRed) {
            splash.setTint(Phaser.Utils.Array.GetRandom(colors));
        }


        const lifetime = Phaser.Math.Between(2000, 6000);
        const permanent = Phaser.Math.FloatBetween(0, 1) < 0.02;
        // –ø–ª–∞–≤–Ω–æ–µ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        if (!permanent) {
            this.scene.tweens.add({
                targets: splash,
                alpha: 0,
                duration: lifetime,
                ease: "Linear",
                onComplete: () => {
                    this.group.killAndHide(splash);
                    splash.setVisible(false);
                }
            });
        }

    }


    getGroup() {
        return this.group;
    }
}