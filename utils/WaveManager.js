import levels from "../levelsConfigs.js";

export default class WaveManager {
    constructor(scene, levelIndex) {
        this.scene = scene;
        this.waves = levels[levelIndex].wavesConfigs.waves;
        this.delayBetweenWaves = levels[levelIndex].wavesConfigs.delayBetweenWaves;

        this.currentWaveIndex = 0;
        this.enemySpawnTimers = [];  // –º–∞—Å—Å–∏–≤ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –≥—Ä—É–ø–ø –≤—Ä–∞–≥–æ–≤
        this.nextWaveTimer = null;  // delayedCall –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–ª–Ω—ã
    }

    start() {
        this.scheduleNextWave();
    }

    scheduleNextWave() {
        // –µ—Å–ª–∏ –≤—Å–µ –≤–æ–ª–Ω—ã –ø—Ä–æ–π–¥–µ–Ω—ã ‚Äî –≤—ã—Ö–æ–¥–∏–º
        if (this.currentWaveIndex >= this.waves.length) {
            console.log('‚úÖ –í—Å–µ –≤–æ–ª–Ω—ã –ø—Ä–æ–π–¥–µ–Ω—ã');
            return;
        }
        // console.log(this.currentWaveIndex); 
        const waveConfig = this.waves[this.currentWaveIndex];

        // –¥–ª—è –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã –≤ –≤–æ–ª–Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–≤–æ–π —Ç–∞–π–º–µ—Ä —Å–ø–∞–≤–Ω–∞
        waveConfig.groups.forEach(group => {
            let spawned = 0;
            // –ø–µ—Ä–≤—ã–π —Å–ø–∞–≤–Ω —Å—Ä–∞–∑—É
            this.scene.events.emit('spawnEnemy', group.type);
            spawned++;

             console.log('new wave ', this.currentWaveIndex,this.scene.hud.elapsedTime);
            const t = this.scene.time.addEvent({
                delay: group.delayBetweenEnemies,
                callback: () => {
                    if (spawned < group.count) {
                        this.scene.events.emit('spawnEnemy', group.type);
                        spawned++;
                    }
                },
                repeat: group.count - 1
            });

            this.enemySpawnTimers.push(t);
        });

        // –ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–æ–ª–Ω—É
        this.currentWaveIndex++;
        this.nextWaveTimer = this.scene.time.delayedCall(this.delayBetweenWaves, () => {
            this.scheduleNextWave();
        });
    }

    /**
     * üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å—ë: –∏ —Ç–µ–∫—É—â–∏–µ —Ç–∞–π–º–µ—Ä—ã, –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–ª–Ω—ã
     */
    stopAll() {
        // –æ—Ç–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã —Å–ø–∞–≤–Ω–∞ –≤—Ä–∞–≥–æ–≤
        this.enemySpawnTimers.forEach(t => {
            if (t && !t.hasDispatched) {
                t.remove(false);
            }
        });
        this.enemySpawnTimers = [];

        // –æ—Ç–º–µ–Ω—è–µ–º —Ç–∞–π–º–µ—Ä —Å–ª–µ–¥—É—é—â–µ–π –≤–æ–ª–Ω—ã
        if (this.nextWaveTimer && !this.nextWaveTimer.hasDispatched) {
            this.nextWaveTimer.remove(false);
            this.nextWaveTimer = null;
        }
    }

    /**
     * üîÑ –°–±—Ä–æ—Å–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —É—Ä–æ–≤–Ω—è
     */
    reset() {
        this.stopAll();
        this.currentWaveIndex = 0;
    }
}